<!-- prism:ViewModelLocator.AutoWireViewModel="True" 自动绑定 ViewModel -->
<!--AllowsTransparency="True" 允许透明效果-->
<!--Background="{DynamicResource MaterialDesignPaper}" 动态主题背景 -->
<!--TextElement.Foreground="{DynamicResource MaterialDesignBody}" 动态文本颜色 -->
<Window x:Class="Memo.Views.MainView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:local="clr-namespace:Memo"
        xmlns:ext="clr-namespace:Memo.Extensions"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:prism="http://prismlibrary.com/" xmlns:viewmodels="clr-namespace:Memo.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:MainViewModel}"
        Title="MainWindow"
        Width="1280"
        Height="768"
        prism:ViewModelLocator.AutoWireViewModel="True"
        AllowsTransparency="True"
        Background="{DynamicResource MaterialDesignPaper}"
        FontFamily="微软雅黑"
        TextElement.FontSize="13"
        TextElement.FontWeight="Regular"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextOptions.TextFormattingMode="Ideal"
        TextOptions.TextRenderingMode="Auto"
        WindowStartupLocation="CenterScreen"
        WindowStyle="None"
        mc:Ignorable="d">


    <!--
    DialogHost: 提供对话框支持，内部可以放置内容，DialogHost允许在应用内显示对话框。
    SnackbarMessageQueue: 将 Snackbar（消息提示）与 MainSnackbar 绑定，提供全局消息队列支持。
    -->
    <materialDesign:DialogHost DialogTheme="Inherit"
                               x:Name="DialogHost"
                            Identifier="Root"
                            >
        
        <!--
        DrawerHost: 提供侧边栏导航功能。
        IsLeftDrawerOpen: 绑定 MenuToggleButton，当按钮切换时控制侧边栏的打开和关闭。
        -->
        <materialDesign:DrawerHost 
            x:Name="drawerHost"
            IsLeftDrawerOpen="{Binding ElementName=MenuToggleButton, Path=IsChecked}">
            <materialDesign:DrawerHost.LeftDrawerContent>
                <DockPanel MinWidth="220">
                    <StackPanel Margin="0,20" DockPanel.Dock="Top">
                        <Image
                            Width="50"
                            Height="50"
                            Source="/Images/yun.jpg">
                            <Image.Clip>
                                <EllipseGeometry
                                    Center="25,25"
                                    RadiusX="25"
                                    RadiusY="25" />
                            </Image.Clip>
                        </Image>
                        <TextBlock
                            Margin="0,10"
                            HorizontalAlignment="Center"
                            Text="{Binding UserName}" />
                    </StackPanel>

                    <ListBox
                        x:Name="menuBar"
                        ItemContainerStyle="{StaticResource MyListBoxItemStyle}"
                        ItemsSource="{Binding MenuBars}">
                        <!-- 绑定导航命令 NavigateCommand，当选择项改变时触发导航 -->
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanged">
                                <i:InvokeCommandAction Command="{Binding NavigateCommand}" 
                                                       CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ListBox}}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Background="Transparent" Orientation="Horizontal">
                                    <materialDesign:PackIcon Margin="15,0" Kind="{Binding Icon}" />
                                    <TextBlock Margin="10,0" Text="{Binding Title}" />
                                </StackPanel>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </DockPanel>
            </materialDesign:DrawerHost.LeftDrawerContent>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <materialDesign:Snackbar x:Name="Snackbar" Panel.ZIndex="1" MessageQueue="{materialDesign:MessageQueue}"/>
                <materialDesign:ColorZone 
                                 Padding="5"
                                 x:Name="ColorZone"
                                 materialDesign:ElevationAssist.Elevation="Dp4"
                                 DockPanel.Dock="Top"
                                 Mode="PrimaryMid">
                    <DockPanel  LastChildFill="True">
                        <!--必须放前面才能在右边-->
                        <StackPanel DockPanel.Dock="Right" Orientation="Horizontal">

                            <!--最小化-->
                            <Button
                                x:Name="btnMin"
                                Content="—"
                                Style="{StaticResource MaterialDesignFlatMidBgButton}" />
                            <!--最大化-->
                            <Button
                                x:Name="btnMax"
                                Content="☐"  
                                Style="{StaticResource MaterialDesignFlatMidBgButton}" />
                            <!--关闭-->
                            <Button
                                x:Name="btnClose"
                                Content="✕"
                                Style="{StaticResource MaterialDesignFlatMidBgButton}" />
                        </StackPanel>

                        <materialDesign:PopupBox DockPanel.Dock="Right">
                            <materialDesign:PopupBox.ToggleContent>
                                <Image
                                Width="25"
                                Height="25"
                                Source="/Images/yun.jpg">
                                    <Image.Clip>
                                        <EllipseGeometry
                                        Center="12.5,12.5"
                                        RadiusX="12.5"
                                        RadiusY="12.5" />
                                    </Image.Clip>
                                </Image>
                            </materialDesign:PopupBox.ToggleContent>

                            <StackPanel>
                                <Button Command="{Binding AppCenterCommand}" Content="个人中心"/>
                                <Button Command="{Binding LoginOutCommand}" Content="注销当前账户"/>
                            </StackPanel>
                        </materialDesign:PopupBox>

                        <StackPanel Orientation="Horizontal" >
                            <!--菜单栏-->
                            <ToggleButton 
                                x:Name="MenuToggleButton"
                               AutomationProperties.Name="HamburgerToggleButton"
                               IsChecked="False"
                               Style="{StaticResource MaterialDesignHamburgerToggleButton}" />

                            <!--回退-->
                            <Button Margin="24,0,0,0"
                                 materialDesign:RippleAssist.Feedback="{Binding RelativeSource={RelativeSource Self}, Path=Foreground, Converter={StaticResource BrushRoundConverter}}"
                                 Command="{Binding GoBackCommand}"
                                 Content="{materialDesign:PackIcon Kind=ArrowLeft,
                                                                   Size=24}"
                                 Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                                 Style="{StaticResource MaterialDesignToolButton}"
                                 ToolTip="Previous Item" />

                            <!--前进-->
                            <Button Margin="16,0,0,0"
                                 materialDesign:RippleAssist.Feedback="{Binding RelativeSource={RelativeSource Self}, Path=Foreground, Converter={StaticResource BrushRoundConverter}}"
                                 Command="{Binding GoForwardCommand}"
                                 Content="{materialDesign:PackIcon Kind=ArrowRight,
                                                                   Size=24}"
                                 Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                                 Style="{StaticResource MaterialDesignToolButton}"
                                 ToolTip="Next Item" />


                            <TextBlock Margin="16,0,0,0"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              AutomationProperties.Name="Material Design In XAML Toolkit"
                              FontSize="22"
                              Text="备忘录" />

                        </StackPanel>

                    </DockPanel>
                </materialDesign:ColorZone>
                <!--
                一个 WPF 控件，用于显示内容。它可以显示任何类型的内容（文本、图像、控件等）
                x:Static 用来引用静态成员
                -->
                <ContentControl Grid.Row="1" prism:RegionManager.RegionName="{x:Static  ext:PrismManager.MainViewRegionName}"/>
            </Grid>
        </materialDesign:DrawerHost>
    </materialDesign:DialogHost>

</Window>
