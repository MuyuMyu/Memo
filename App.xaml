<prism:PrismApplication x:Class="Memo.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:prism="http://prismlibrary.com/"
             xmlns:local="clr-namespace:Memo"
             >
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <materialDesign:BundledTheme BaseTheme="Dark" PrimaryColor="DeepPurple" SecondaryColor="Lime" />

                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesign2.Defaults.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style x:Key="MyListBoxItemStyle" TargetType="ListBoxItem">
                <Setter Property="MinHeight" Value="40" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Grid>
                                <!-- 定义两个 Border，一个用于选中状态下的边框，一个用于背景 -->
                                <Border x:Name="borderHeader"/>
                                <Border x:Name="border"/>

                                <!-- 显示 ListBoxItem 的内容，使用 ContentPresenter 来表示 -->
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                
                            </Grid>

                            <!-- 触发器部分，定义在特定状态下（选中和鼠标悬停）如何改变外观 -->
                            <ControlTemplate.Triggers>
                                <!-- 当 ListBoxItem 选中时的样式变化 -->
                                <Trigger Property="IsSelected" Value="True">
                                    <!-- 选中时，左侧边框变粗（4px），颜色变化为 PrimaryHueLightBrush -->
                                    <Setter TargetName="borderHeader" Property="BorderThickness" Value="4,0,0,0" />
                                    <Setter TargetName="borderHeader" Property="BorderBrush" Value="{DynamicResource PrimaryHueLightBrush}" />

                                    <!-- 设置选中状态下背景的透明度为 20%，并应用 PrimaryHueLightBrush 颜色 -->
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
                                    <Setter TargetName="border" Property="Opacity" Value="0.2" />

                                    <Setter Property="Background" TargetName="border" Value="Transparent"/>
                                </Trigger>

                                <!-- 当鼠标悬停时的样式变化 -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <!-- 鼠标悬停时，背景颜色变为 PrimaryHueLightBrush，透明度为 20% -->
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
                                    <Setter TargetName="border" Property="Opacity" Value="0.2" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</prism:PrismApplication>
